$date
	Thu Dec  5 12:19:34 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % flush [31:0] $end
$var integer 32 & i [31:0] $end
$var integer 32 ' outfile [31:0] $end
$var integer 32 ( stall [31:0] $end
$scope module CPU $end
$var wire 32 ) ALUForward1 [31:0] $end
$var wire 32 * ALUForward2 [31:0] $end
$var wire 32 + DMWdata [31:0] $end
$var wire 32 , DMaddr [31:0] $end
$var wire 1 - EXnop $end
$var wire 32 . IDrs1_data [31:0] $end
$var wire 32 / IDrs2_data [31:0] $end
$var wire 1 0 IFflush $end
$var wire 1 1 IFstall $end
$var wire 32 2 MemForward1 [31:0] $end
$var wire 32 3 MemForward2 [31:0] $end
$var wire 32 4 MemRdata [31:0] $end
$var wire 1 5 PCWrite $end
$var wire 1 6 PC_select $end
$var wire 5 7 RDaddr [4:0] $end
$var wire 32 8 RDdata [31:0] $end
$var wire 5 9 RS1addr [4:0] $end
$var wire 5 : RS2addr [4:0] $end
$var wire 1 ; RegWrite $end
$var wire 32 < branch_PC [31:0] $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 2 = select1 [1:0] $end
$var wire 2 > select2 [1:0] $end
$var wire 1 # start_i $end
$var wire 32 ? nxt_PC1 [31:0] $end
$var wire 32 @ nxt_PC [31:0] $end
$var wire 32 A instr [31:0] $end
$var wire 32 B cur_PC [31:0] $end
$var wire 5 C WBrd [4:0] $end
$var wire 32 D WBdata [31:0] $end
$var wire 1 E WB_WBSrc $end
$var wire 32 F WB_Memdata [31:0] $end
$var wire 32 G WB_ALUres [31:0] $end
$var wire 1 H WBWB $end
$var wire 32 I Src2 [31:0] $end
$var wire 32 J Src1 [31:0] $end
$var wire 32 K RS2data [31:0] $end
$var wire 32 L RS1data [31:0] $end
$var wire 5 M MuxOut [4:0] $end
$var wire 5 N MuxIn [4:0] $end
$var wire 32 O Memdata [31:0] $end
$var wire 32 P Memaddr [31:0] $end
$var wire 1 Q MemWrite $end
$var wire 2 R Mem [1:0] $end
$var wire 5 S MEMrd [4:0] $end
$var wire 1 T MEM_WBSrc $end
$var wire 1 U MEM_WB $end
$var wire 32 V MEM_ALUres [31:0] $end
$var wire 5 W IDrs2 [4:0] $end
$var wire 5 X IDrs1 [4:0] $end
$var wire 5 Y IDrd [4:0] $end
$var wire 7 Z IDopcode [6:0] $end
$var wire 32 [ IDimm_val [31:0] $end
$var wire 7 \ IDfunct7 [6:0] $end
$var wire 3 ] IDfunct3 [2:0] $end
$var wire 32 ^ ID_newPC [31:0] $end
$var wire 32 _ ID_instr [31:0] $end
$var wire 32 ` ID_PC [31:0] $end
$var wire 1 a ID_EQ $end
$var wire 1 b IDWB1 $end
$var wire 1 c IDWB $end
$var wire 12 d IDSimm1 [11:0] $end
$var wire 32 e IDSimm [31:0] $end
$var wire 2 f IDMem1 [1:0] $end
$var wire 2 g IDMem [1:0] $end
$var wire 12 h IDIimm [11:0] $end
$var wire 13 i IDBimm [12:0] $end
$var wire 1 j HDstall $end
$var wire 1 k HDflush $end
$var wire 1 l HD_PCWrite $end
$var wire 1 m HDMux $end
$var wire 2 n ForwardB [1:0] $end
$var wire 2 o ForwardA [1:0] $end
$var wire 32 p EXval2 [31:0] $end
$var wire 32 q EXval1 [31:0] $end
$var wire 5 r EXrs2 [4:0] $end
$var wire 5 s EXrs1 [4:0] $end
$var wire 5 t EXrd [4:0] $end
$var wire 32 u EXimm [31:0] $end
$var wire 1 v EXWB $end
$var wire 2 w EXMem [1:0] $end
$var wire 32 x DMRdata [31:0] $end
$var wire 32 y ALUans [31:0] $end
$var wire 1 z ALUSrc $end
$var wire 2 { ALUOp1 [1:0] $end
$var wire 2 | ALUOp [1:0] $end
$var wire 4 } ALUCtrl [3:0] $end
$scope module ALU $end
$var wire 32 ~ data_o [31:0] $end
$var wire 32 !" data2_i [31:0] $end
$var wire 32 "" data1_i [31:0] $end
$var wire 4 #" ALUCtrl_i [3:0] $end
$var reg 32 $" tmp [31:0] $end
$upscope $end
$scope module ALU_SRC1 $end
$var wire 32 %" data2_i [31:0] $end
$var wire 32 &" data3_i [31:0] $end
$var wire 2 '" select_i [1:0] $end
$var wire 32 (" data_o [31:0] $end
$var wire 32 )" data1_i [31:0] $end
$upscope $end
$scope module ALU_SRC2 $end
$var wire 32 *" data2_i [31:0] $end
$var wire 32 +" data3_i [31:0] $end
$var wire 2 ," select_i [1:0] $end
$var wire 32 -" data_o [31:0] $end
$var wire 32 ." data1_i [31:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 13 /" data2_i [12:0] $end
$var wire 32 0" data_o [31:0] $end
$var wire 32 1" data1_i [31:0] $end
$upscope $end
$scope module Adder $end
$var wire 13 2" data2_i [12:0] $end
$var wire 32 3" data_o [31:0] $end
$var wire 32 4" data1_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 7 5" opcode [6:0] $end
$var wire 1 b WB $end
$var wire 2 6" Mem [1:0] $end
$var wire 1 z ALUSrc $end
$var wire 2 7" ALUOp [1:0] $end
$upscope $end
$scope module CtrlMux $end
$var wire 5 8" data1_i [4:0] $end
$var wire 5 9" data2_i [4:0] $end
$var wire 1 - select_i $end
$var wire 5 :" data_o [4:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 Q MemWrite_i $end
$var wire 32 ;" addr_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 32 <" data_i [31:0] $end
$var wire 32 =" data_o [31:0] $end
$upscope $end
$scope module EQUAL $end
$var wire 32 >" data1_i [31:0] $end
$var wire 32 ?" data2_i [31:0] $end
$var wire 1 a data_o $end
$upscope $end
$scope module EXMEM $end
$var wire 32 @" ALUres_i [31:0] $end
$var wire 32 A" ALUres_o [31:0] $end
$var wire 1 U WB_o $end
$var wire 1 ! clk_i $end
$var wire 5 B" rd_addr_o [4:0] $end
$var wire 32 C" rs2_data_i [31:0] $end
$var wire 32 D" rs1_data_i [31:0] $end
$var wire 5 E" rd_addr_i [4:0] $end
$var wire 32 F" imm_i [31:0] $end
$var wire 1 v WB_i $end
$var wire 32 G" Memdata_o [31:0] $end
$var wire 32 H" Memaddr_o [31:0] $end
$var wire 2 I" Mem_o [1:0] $end
$var wire 2 J" Mem_i [1:0] $end
$var reg 32 K" tmp_ALUres_o [31:0] $end
$var reg 2 L" tmp_Mem_o [1:0] $end
$var reg 32 M" tmp_Memaddr_o [31:0] $end
$var reg 32 N" tmp_Memdata_o [31:0] $end
$var reg 1 O" tmp_WB_o $end
$var reg 5 P" tmp_rd_addr_o [4:0] $end
$upscope $end
$scope module FU $end
$var wire 1 U RegWrite_EXMEM $end
$var wire 5 Q" rd_EXMEM [4:0] $end
$var wire 5 R" rs2_IDEX [4:0] $end
$var wire 5 S" rs1_IDEX [4:0] $end
$var wire 5 T" rd_MEMWB [4:0] $end
$var wire 1 H RegWrite_MEMWB $end
$var reg 2 U" ForwardA [0:1] $end
$var reg 2 V" ForwardB [0:1] $end
$upscope $end
$scope module HD $end
$var wire 1 a ID_equal $end
$var wire 1 W" MemRead_IDEX $end
$var wire 1 X" isBranch $end
$var wire 5 Y" rs1_IFID [4:0] $end
$var wire 5 Z" rs2_IFID [4:0] $end
$var wire 5 [" rd_IDEX [4:0] $end
$var reg 1 k IFIDFlush_o $end
$var reg 1 j IFIDStall_o $end
$var reg 1 m Mux_o $end
$var reg 1 l PCWrite_o $end
$upscope $end
$scope module IDEX $end
$var wire 4 \" ALUCtrl [3:0] $end
$var wire 2 ]" ALUOp [1:0] $end
$var wire 1 z ALUSrc $end
$var wire 2 ^" Mem [1:0] $end
$var wire 32 _" Simm_o [31:0] $end
$var wire 1 c WB $end
$var wire 1 v WB_o $end
$var wire 1 ! clk_i $end
$var wire 3 `" funct3 [2:0] $end
$var wire 7 a" funct7 [6:0] $end
$var wire 5 b" rd_addr [4:0] $end
$var wire 5 c" rd_addr_o [4:0] $end
$var wire 5 d" rs1_addr [4:0] $end
$var wire 5 e" rs1_addr_o [4:0] $end
$var wire 32 f" rs1_data [31:0] $end
$var wire 5 g" rs2_addr [4:0] $end
$var wire 5 h" rs2_addr_o [4:0] $end
$var wire 32 i" rs2_data [31:0] $end
$var wire 32 j" val1 [31:0] $end
$var wire 32 k" val2 [31:0] $end
$var wire 32 l" Simm [31:0] $end
$var wire 2 m" Mem_o [1:0] $end
$var wire 32 n" Iimm [31:0] $end
$var reg 10 o" funct [9:0] $end
$var reg 4 p" tmp [3:0] $end
$var reg 4 q" tmp_ALUCtrl [3:0] $end
$var reg 2 r" tmp_Mem_o [1:0] $end
$var reg 32 s" tmp_Simm_o [31:0] $end
$var reg 1 t" tmp_WB_o $end
$var reg 5 u" tmp_rd_addr_o [4:0] $end
$var reg 5 v" tmp_rs1_addr_o [4:0] $end
$var reg 5 w" tmp_rs2_addr_o [4:0] $end
$var reg 32 x" tmp_val1 [31:0] $end
$var reg 32 y" tmp_val2 [31:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 0 IFflush $end
$var wire 1 1 IFstall $end
$var wire 32 z" PC_o [31:0] $end
$var wire 1 ! clk $end
$var wire 32 {" instr_o [31:0] $end
$var wire 32 |" instr_i [31:0] $end
$var wire 32 }" PC_i [31:0] $end
$var reg 32 ~" PC [31:0] $end
$var reg 32 !# instr [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 "# instr_o [31:0] $end
$var wire 32 ## addr_i [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 $# ALUres_i [31:0] $end
$var wire 32 %# MemRdata_i [31:0] $end
$var wire 1 T WBSrc_i $end
$var wire 1 U WB_i $end
$var wire 1 ! clk_i $end
$var wire 5 &# rd_addr_i [4:0] $end
$var wire 5 '# rd_addr_o [4:0] $end
$var wire 1 H WB_o $end
$var wire 1 E WBSrc_o $end
$var wire 32 (# MemRdata_o [31:0] $end
$var wire 32 )# ALUres_o [31:0] $end
$var reg 32 *# tmp_ALUres_o [31:0] $end
$var reg 32 +# tmp_MemRdata_o [31:0] $end
$var reg 1 E tmp_WBSrc_o $end
$var reg 1 H tmp_WB_o $end
$var reg 5 ,# tmp_rd_addr_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 5 PCWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var wire 32 -# pc_i [31:0] $end
$var reg 32 .# pc_o [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 /# data1_i [31:0] $end
$var wire 32 0# data2_i [31:0] $end
$var wire 32 1# data_o [31:0] $end
$var wire 1 2# select_i $end
$upscope $end
$scope module Registers $end
$var wire 5 3# RDaddr_i [4:0] $end
$var wire 32 4# RDdata_i [31:0] $end
$var wire 5 5# RS1addr_i [4:0] $end
$var wire 5 6# RS2addr_i [4:0] $end
$var wire 1 ; RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 32 7# RS2data_o [31:0] $end
$var wire 32 8# RS1data_o [31:0] $end
$upscope $end
$scope module SignExtendI $end
$var wire 12 9# data_i [11:0] $end
$var wire 32 :# data_o [31:0] $end
$upscope $end
$scope module SignExtendS $end
$var wire 12 ;# data_i [11:0] $end
$var wire 32 <# data_o [31:0] $end
$upscope $end
$scope module WB_MUX $end
$var wire 32 =# data1_i [31:0] $end
$var wire 32 ># data2_i [31:0] $end
$var wire 1 E select_i $end
$var wire 32 ?# data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
02#
b100 1#
bx 0#
b100 /#
b0 .#
b100 -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
b0 ##
b101000000000001100010011 "#
bx !#
bx ~"
b0 }"
b101000000000001100010011 |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
xt"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
xX"
xW"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
xO"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
b0 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx0 2"
b0 1"
b100 0"
b100 /"
bx ."
bx -"
bx ,"
bz +"
bz *"
bx )"
bx ("
bx '"
bz &"
bz %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
xz
bx y
bx x
bx w
xv
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
0m
1l
0k
0j
bx0 i
bx h
bx g
bx f
bx e
bx d
xc
xb
xa
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
xT
bx S
bx R
xQ
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
xH
bx G
bx F
xE
bx D
bx C
b0 B
b101000000000001100010011 A
b100 @
b100 ?
bx >
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
x6
15
bx 4
bz 3
bz 2
01
00
bx /
bx .
0-
bx ,
bx +
bz *
bz )
b0 (
b11 '
b100000 &
b0 %
b0 $
0#
0"
0!
$end
#12
1#
1"
#25
b10 |
b10 ]"
b0 g
b0 ^"
1c
b10 {
b10 7"
b10001 M
b10001 :"
06
1b
b10001 N
b10001 8"
b0 f
b0 6"
b110 <
b110 0#
b110 ^
b110 3"
b110 i
b110 2"
0X"
1z
b10 p"
b0 o"
b110 e
b110 l"
b110 <#
b110 d
b110 ;#
b1010 [
b1010 n"
b1010 :#
b1010 h
b1010 9#
b110 Y
b110 b"
b1010 :
b1010 6#
b1010 W
b1010 Z"
b1010 g"
b0 9
b0 5#
b0 X
b0 Y"
b0 d"
b10011 Z
b10011 5"
b0 ]
b0 `"
b0 \
b0 a"
b0 A
b0 |"
b0 "#
b0 `
b0 4"
b0 z"
b0 ~"
b101000000000001100010011 _
b101000000000001100010011 {"
b101000000000001100010011 !#
b1000 @
b1000 -#
b1000 1#
b1000 ?
b1000 0"
b1000 /#
b100 B
b100 1"
b100 }"
b100 ##
b100 .#
b1 $
1!
#50
0!
#75
b1010 I
b1010 !"
b1010 -"
b0 =
b0 '"
b0 o
b0 U"
b0 >
b0 ,"
b0 n
b0 V"
b0 |
b0 ]"
b1 g
b1 ^"
b0 {
b0 7"
b11 M
b11 :"
b11 N
b11 8"
b1 f
b1 6"
b0 i
b0 2"
0W"
b0 e
b0 l"
b0 <#
b0 d
b0 ;#
b0 [
b0 n"
b0 :#
b0 h
b0 9#
b0 Y
b0 b"
b0 :
b0 6#
b0 W
b0 Z"
b0 g"
b0 Z
b0 5"
b10 }
b10 #"
b10 \"
b10 q"
1v
1t"
b0 w
b0 J"
b0 m"
b0 r"
b110 t
b110 E"
b110 ["
b110 c"
b110 u"
b1010 r
b1010 R"
b1010 h"
b1010 w"
b0 s
b0 S"
b0 e"
b0 v"
b110 u
b110 F"
b110 _"
b110 s"
b1010 p
b1010 ."
b1010 C"
b1010 k"
b1010 y"
b100 <
b100 0#
b100 ^
b100 3"
b100 `
b100 4"
b100 z"
b100 ~"
b0 _
b0 {"
b0 !#
b1100 @
b1100 -#
b1100 1#
b1100 ?
b1100 0"
b1100 /#
b1000 B
b1000 1"
b1000 }"
b1000 ##
b1000 .#
b10 $
1!
#100
0!
#125
b0 g
b0 ^"
0c
b0 M
b0 :"
1-
11
1j
05
0l
1W"
b0 I
b0 !"
b0 -"
0T
0Q
b1000 <
b1000 0#
b1000 ^
b1000 3"
b1000 `
b1000 4"
b1000 z"
b1000 ~"
b1 w
b1 J"
b1 m"
b1 r"
b0 t
b0 E"
b0 ["
b0 c"
b0 u"
b0 r
b0 R"
b0 h"
b0 w"
b0 u
b0 F"
b0 _"
b0 s"
b0 p
b0 ."
b0 C"
b0 k"
b0 y"
b1010 +
b1010 <"
b1010 O
b1010 G"
b1010 N"
b110 S
b110 B"
b110 Q"
b110 &#
b110 P"
b0 R
b0 I"
b0 L"
1U
1O"
b10000 @
b10000 -#
b10000 1#
b10000 ?
b10000 0"
b10000 /#
b1100 B
b1100 1"
b1100 }"
b1100 ##
b1100 .#
b11 $
1!
#150
0!
#175
b1 g
b1 ^"
1c
b11 M
b11 :"
0-
01
0j
1a
b0 .
b0 >"
b0 f"
b0 L
b0 8#
b0 /
b0 ?"
b0 i"
b0 K
b0 7#
15
1l
1T
0W"
0E
b110 7
b110 3#
b110 C
b110 T"
b110 '#
b110 ,#
1;
1H
b0 +
b0 <"
b0 O
b0 G"
b0 N"
b0 S
b0 B"
b0 Q"
b0 &#
b0 P"
b1 R
b1 I"
b1 L"
0v
0t"
b0 w
b0 J"
b0 m"
b0 r"
b100 $
1!
#200
0!
#225
b0 g
b0 ^"
0c
b0 M
b0 :"
1-
11
1j
05
0l
b0 y
b0 ~
b0 @"
b0 $"
1W"
b0 J
b0 ""
b0 ("
0T
b1100 <
b1100 0#
b1100 ^
b1100 3"
b1100 `
b1100 4"
b1100 z"
b1100 ~"
1v
1t"
b1 w
b1 J"
b1 m"
b1 r"
b0 q
b0 )"
b0 D"
b0 j"
b0 x"
b0 R
b0 I"
b0 L"
0U
0O"
1E
b0 7
b0 3#
b0 C
b0 T"
b0 '#
b0 ,#
b10100 @
b10100 -#
b10100 1#
b10100 ?
b10100 0"
b10100 /#
b10000 B
b10000 1"
b10000 }"
b10000 ##
b10000 .#
b101 $
1!
#250
0!
#275
b1 g
b1 ^"
1c
b11 M
b11 :"
0-
01
0j
15
1l
b101 4
b101 %#
b101 x
b101 ="
1T
0W"
0E
0;
0H
b0 ,
b0 ;"
b0 P
b0 H"
b0 M"
b0 V
b0 A"
b0 $#
b0 K"
b1 R
b1 I"
b1 L"
1U
1O"
0v
0t"
b0 w
b0 J"
b0 m"
b0 r"
b110 $
1!
#300
0!
#325
b0 g
b0 ^"
0c
b0 M
b0 :"
1-
11
1j
05
0l
1W"
0T
b101 8
b101 4#
b101 D
b101 ?#
b10000 <
b10000 0#
b10000 ^
b10000 3"
b10000 `
b10000 4"
b10000 z"
b10000 ~"
1v
1t"
b1 w
b1 J"
b1 m"
b1 r"
b0 R
b0 I"
b0 L"
0U
0O"
1E
b0 G
b0 )#
b0 *#
b0 =#
b101 F
b101 (#
b101 +#
b101 >#
1;
1H
b11000 @
b11000 -#
b11000 1#
b11000 ?
b11000 0"
b11000 /#
b10100 B
b10100 1"
b10100 }"
b10100 ##
b10100 .#
b111 $
1!
#350
0!
#375
b1 g
b1 ^"
1c
b11 M
b11 :"
0-
01
0j
15
1l
b0 8
b0 4#
b0 D
b0 ?#
1T
0W"
0E
0;
0H
b1 R
b1 I"
b1 L"
1U
1O"
0v
0t"
b0 w
b0 J"
b0 m"
b0 r"
b1000 $
1!
#400
0!
#425
b0 g
b0 ^"
0c
b0 M
b0 :"
1-
11
1j
05
0l
1W"
0T
b101 8
b101 4#
b101 D
b101 ?#
b10100 <
b10100 0#
b10100 ^
b10100 3"
b10100 `
b10100 4"
b10100 z"
b10100 ~"
1v
1t"
b1 w
b1 J"
b1 m"
b1 r"
b0 R
b0 I"
b0 L"
0U
0O"
1E
1;
1H
b11100 @
b11100 -#
b11100 1#
b11100 ?
b11100 0"
b11100 /#
b11000 B
b11000 1"
b11000 }"
b11000 ##
b11000 .#
1!
